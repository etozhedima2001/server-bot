package main

import (
	"io"
	"log"
	"os"
	"encoding/json"
	"fmt"
	"net/http"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

type GitHubWorkflowRun struct {
	Status     string `json:"status"`
	Conclusion string `json:"conclusion"`
	HTMLURL    string `json:"html_url"`
}

func getGitHubActionsStatus(repoOwner, repoName, githubToken string) (string, error) {
	url := fmt.Sprintf("https://api.github.com/repos/%s/%s/actions/runs?per_page=1", repoOwner, repoName)

	req, err := http.NewRequest("GET", url, nil)
	if err != nil {
		return "", fmt.Errorf("–æ—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞: %v", err)
	}

	req.Header.Set("Authorization", "Bearer "+githubToken)
	req.Header.Set("Accept", "application/vnd.github.v3+json")

	client := &http.Client{}
	resp, err := client.Do(req)
	if err != nil {
		return "", fmt.Errorf("–æ—à–∏–±–∫–∞ HTTP-–∑–∞–ø—Ä–æ—Å–∞: %v", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		body, _ := io.ReadAll(resp.Body)
		return "", fmt.Errorf("GitHub API –≤–µ—Ä–Ω—É–ª %d, %s", resp.StatusCode, string(body))
	}

	var result struct {
		WorkflowRuns []GitHubWorkflowRun `json:"workflow_runs"`
	}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return "", fmt.Errorf("–æ—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: %v", err)
	}

	if len(result.WorkflowRuns) == 0 {
		return "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ workflow", nil
	}

	run := result.WorkflowRuns[0]
	return fmt.Sprintf(
		"**–°—Ç–∞—Ç—É—Å CI/CD (GitHub Actions)**\n"+
			"üîπ **–°—Ç–∞—Ç—É—Å:** `%s`\n"+
			"üîπ **–†–µ–∑—É–ª—å—Ç–∞—Ç:** `%s`\n"+
			"üîπ **–°—Å—ã–ª–∫–∞:** [–û—Ç–∫—Ä—ã—Ç—å Workflow](%s)",
		run.Status,
		run.Conclusion,
		run.HTMLURL,
	), nil
}


func main() {
	telegramToken := os.Getenv("TELEGRAM_TOKEN")
	if telegramToken == "" {
        log.Fatal("‚ùå TELEGRAM_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è.")
    }
	bot, err := tgbotapi.NewBotAPI(telegramToken)
	githubToken := os.Getenv("GITHUB_TOKEN")
        repoOwner := "etozhedima2001"
        repoName := "server-bot"
	if err != nil {
		log.Panic(err)
	}

	if githubToken == "" {
		log.Panic("github —Ç–æ–∫–µ–Ω –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
	}

	bot.Debug = true // –í–∫–ª—é—á–∏—Ç—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ

	log.Printf("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω: %s", bot.Self.UserName)

	u := tgbotapi.NewUpdate(0)
	u.Timeout = 60

	updates := bot.GetUpdatesChan(u)

	for update := range updates {
		if update.Message == nil {
			continue
		}

		msg := tgbotapi.NewMessage(update.Message.Chat.ID, "")

		switch update.Message.Text {
		case "/start":
			msg.Text = "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–æ–º. –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n/status - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–µ—Ä–≤–µ—Ä\n/cicd - —É–∑–Ω–∞—Ç—å —Å—Ç–∞—Ç—É—Å ci/cd"
		case "/status":
			msg.Text = "–°–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç!testing deploy"
		case "/cicd":
			status, err := getGitHubActionsStatus(repoOwner, repoName, githubToken)
			if err != nil {
				msg.Text = "–û—à–∏–±–∫–∞: " + err.Error()
			} else {
				msg.Text = status
				msg.ParseMode = "Markdown"
			}
		default:
			msg.Text = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞."
		}

		if _, err := bot.Send(msg); err != nil {
			log.Println(err)
		}
	}
}
